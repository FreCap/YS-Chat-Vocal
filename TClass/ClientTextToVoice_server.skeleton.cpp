// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClientTextToVoice.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ThriftServer;

class ClientTextToVoiceHandler : virtual public ClientTextToVoiceIf {
 public:
  ClientTextToVoiceHandler() {
    // Your initialization goes here
  }

  int32_t channelCreate(const int32_t server_id, const std::string& nome, const std::string& password) {
    // Your implementation goes here
    printf("channelCreate\n");
  }

  bool channelDelete(const int32_t server_id, const std::string& nome) {
    // Your implementation goes here
    printf("channelDelete\n");
  }

  bool disconnectClient(const int32_t server_id, const std::string& clientID) {
    // Your implementation goes here
    printf("disconnectClient\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ClientTextToVoiceHandler> handler(new ClientTextToVoiceHandler());
  shared_ptr<TProcessor> processor(new ClientTextToVoiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

