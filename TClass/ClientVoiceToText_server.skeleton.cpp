// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ClientVoiceToText.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ThriftServer;

class ClientVoiceToTextHandler : virtual public ClientVoiceToTextIf {
 public:
  ClientVoiceToTextHandler() {
    // Your initialization goes here
  }

  void info(const int32_t server_id, const int32_t max_clients, const std::string& DNS, const int32_t port_TS, const int32_t port_Thrift) {
    // Your implementation goes here
    printf("info\n");
  }

  bool onClientConnected(const int32_t server_id, const int32_t clientID, const std::string& clientNick) {
    // Your implementation goes here
    printf("onClientConnected\n");
  }

  bool onClientDisconnected(const int32_t server_id, const int32_t clientID) {
    // Your implementation goes here
    printf("onClientDisconnected\n");
  }

  bool onClientJoined(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) {
    // Your implementation goes here
    printf("onClientJoined\n");
  }

  bool onClientLeft(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) {
    // Your implementation goes here
    printf("onClientLeft\n");
  }

  bool onChannelCreated(const int32_t server_id, const int32_t channelID, const std::string& channelName) {
    // Your implementation goes here
    printf("onChannelCreated\n");
  }

  bool onChannelDeleted(const int32_t server_id, const int32_t channelID) {
    // Your implementation goes here
    printf("onChannelDeleted\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ClientVoiceToTextHandler> handler(new ClientVoiceToTextHandler());
  shared_ptr<TProcessor> processor(new ClientVoiceToTextProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

