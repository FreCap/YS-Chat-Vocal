/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientVoiceToText_H
#define ClientVoiceToText_H

#include <TDispatchProcessor.h>
#include "VoiceToText_types.h"

namespace ThriftServer {

class ClientVoiceToTextIf {
 public:
  virtual ~ClientVoiceToTextIf() {}
  virtual void info(const int32_t server_id, const int32_t max_clients, const std::string& DNS, const int32_t port_TS, const int32_t port_Thrift) = 0;
  virtual bool onClientConnected(const int32_t server_id, const int32_t clientID, const std::string& clientNick) = 0;
  virtual bool onClientDisconnected(const int32_t server_id, const int32_t clientID) = 0;
  virtual bool onClientJoined(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) = 0;
  virtual bool onClientLeft(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) = 0;
  virtual bool onChannelCreated(const int32_t server_id, const int32_t channelID, const std::string& channelName) = 0;
  virtual bool onChannelDeleted(const int32_t server_id, const int32_t channelID) = 0;
};

class ClientVoiceToTextIfFactory {
 public:
  typedef ClientVoiceToTextIf Handler;

  virtual ~ClientVoiceToTextIfFactory() {}

  virtual ClientVoiceToTextIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientVoiceToTextIf* /* handler */) = 0;
};

class ClientVoiceToTextIfSingletonFactory : virtual public ClientVoiceToTextIfFactory {
 public:
  ClientVoiceToTextIfSingletonFactory(const boost::shared_ptr<ClientVoiceToTextIf>& iface) : iface_(iface) {}
  virtual ~ClientVoiceToTextIfSingletonFactory() {}

  virtual ClientVoiceToTextIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientVoiceToTextIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientVoiceToTextIf> iface_;
};

class ClientVoiceToTextNull : virtual public ClientVoiceToTextIf {
 public:
  virtual ~ClientVoiceToTextNull() {}
  void info(const int32_t /* server_id */, const int32_t /* max_clients */, const std::string& /* DNS */, const int32_t /* port_TS */, const int32_t /* port_Thrift */) {
    return;
  }
  bool onClientConnected(const int32_t /* server_id */, const int32_t /* clientID */, const std::string& /* clientNick */) {
    bool _return = false;
    return _return;
  }
  bool onClientDisconnected(const int32_t /* server_id */, const int32_t /* clientID */) {
    bool _return = false;
    return _return;
  }
  bool onClientJoined(const int32_t /* server_id */, const int32_t /* clientID */, const int32_t /* ChannelID */) {
    bool _return = false;
    return _return;
  }
  bool onClientLeft(const int32_t /* server_id */, const int32_t /* clientID */, const int32_t /* ChannelID */) {
    bool _return = false;
    return _return;
  }
  bool onChannelCreated(const int32_t /* server_id */, const int32_t /* channelID */, const std::string& /* channelName */) {
    bool _return = false;
    return _return;
  }
  bool onChannelDeleted(const int32_t /* server_id */, const int32_t /* channelID */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ClientVoiceToText_info_args__isset {
  _ClientVoiceToText_info_args__isset() : server_id(false), max_clients(false), DNS(false), port_TS(false), port_Thrift(false) {}
  bool server_id;
  bool max_clients;
  bool DNS;
  bool port_TS;
  bool port_Thrift;
} _ClientVoiceToText_info_args__isset;

class ClientVoiceToText_info_args {
 public:

  ClientVoiceToText_info_args() : server_id(0), max_clients(0), DNS(""), port_TS(0), port_Thrift(0) {
  }

  virtual ~ClientVoiceToText_info_args() throw() {}

  int32_t server_id;
  int32_t max_clients;
  std::string DNS;
  int32_t port_TS;
  int32_t port_Thrift;

  _ClientVoiceToText_info_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_max_clients(const int32_t val) {
    max_clients = val;
  }

  void __set_DNS(const std::string& val) {
    DNS = val;
  }

  void __set_port_TS(const int32_t val) {
    port_TS = val;
  }

  void __set_port_Thrift(const int32_t val) {
    port_Thrift = val;
  }

  bool operator == (const ClientVoiceToText_info_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(max_clients == rhs.max_clients))
      return false;
    if (!(DNS == rhs.DNS))
      return false;
    if (!(port_TS == rhs.port_TS))
      return false;
    if (!(port_Thrift == rhs.port_Thrift))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_info_pargs {
 public:


  virtual ~ClientVoiceToText_info_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* max_clients;
  const std::string* DNS;
  const int32_t* port_TS;
  const int32_t* port_Thrift;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_info_result {
 public:

  ClientVoiceToText_info_result() {
  }

  virtual ~ClientVoiceToText_info_result() throw() {}


  bool operator == (const ClientVoiceToText_info_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ClientVoiceToText_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_info_presult {
 public:


  virtual ~ClientVoiceToText_info_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onClientConnected_args__isset {
  _ClientVoiceToText_onClientConnected_args__isset() : server_id(false), clientID(false), clientNick(false) {}
  bool server_id;
  bool clientID;
  bool clientNick;
} _ClientVoiceToText_onClientConnected_args__isset;

class ClientVoiceToText_onClientConnected_args {
 public:

  ClientVoiceToText_onClientConnected_args() : server_id(0), clientID(0), clientNick("") {
  }

  virtual ~ClientVoiceToText_onClientConnected_args() throw() {}

  int32_t server_id;
  int32_t clientID;
  std::string clientNick;

  _ClientVoiceToText_onClientConnected_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_clientID(const int32_t val) {
    clientID = val;
  }

  void __set_clientNick(const std::string& val) {
    clientNick = val;
  }

  bool operator == (const ClientVoiceToText_onClientConnected_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (!(clientNick == rhs.clientNick))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientConnected_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientConnected_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onClientConnected_pargs {
 public:


  virtual ~ClientVoiceToText_onClientConnected_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* clientID;
  const std::string* clientNick;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientConnected_result__isset {
  _ClientVoiceToText_onClientConnected_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientConnected_result__isset;

class ClientVoiceToText_onClientConnected_result {
 public:

  ClientVoiceToText_onClientConnected_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onClientConnected_result() throw() {}

  bool success;

  _ClientVoiceToText_onClientConnected_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onClientConnected_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientConnected_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientConnected_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientConnected_presult__isset {
  _ClientVoiceToText_onClientConnected_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientConnected_presult__isset;

class ClientVoiceToText_onClientConnected_presult {
 public:


  virtual ~ClientVoiceToText_onClientConnected_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onClientConnected_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onClientDisconnected_args__isset {
  _ClientVoiceToText_onClientDisconnected_args__isset() : server_id(false), clientID(false) {}
  bool server_id;
  bool clientID;
} _ClientVoiceToText_onClientDisconnected_args__isset;

class ClientVoiceToText_onClientDisconnected_args {
 public:

  ClientVoiceToText_onClientDisconnected_args() : server_id(0), clientID(0) {
  }

  virtual ~ClientVoiceToText_onClientDisconnected_args() throw() {}

  int32_t server_id;
  int32_t clientID;

  _ClientVoiceToText_onClientDisconnected_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_clientID(const int32_t val) {
    clientID = val;
  }

  bool operator == (const ClientVoiceToText_onClientDisconnected_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientDisconnected_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientDisconnected_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onClientDisconnected_pargs {
 public:


  virtual ~ClientVoiceToText_onClientDisconnected_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* clientID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientDisconnected_result__isset {
  _ClientVoiceToText_onClientDisconnected_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientDisconnected_result__isset;

class ClientVoiceToText_onClientDisconnected_result {
 public:

  ClientVoiceToText_onClientDisconnected_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onClientDisconnected_result() throw() {}

  bool success;

  _ClientVoiceToText_onClientDisconnected_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onClientDisconnected_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientDisconnected_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientDisconnected_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientDisconnected_presult__isset {
  _ClientVoiceToText_onClientDisconnected_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientDisconnected_presult__isset;

class ClientVoiceToText_onClientDisconnected_presult {
 public:


  virtual ~ClientVoiceToText_onClientDisconnected_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onClientDisconnected_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onClientJoined_args__isset {
  _ClientVoiceToText_onClientJoined_args__isset() : server_id(false), clientID(false), ChannelID(false) {}
  bool server_id;
  bool clientID;
  bool ChannelID;
} _ClientVoiceToText_onClientJoined_args__isset;

class ClientVoiceToText_onClientJoined_args {
 public:

  ClientVoiceToText_onClientJoined_args() : server_id(0), clientID(0), ChannelID(0) {
  }

  virtual ~ClientVoiceToText_onClientJoined_args() throw() {}

  int32_t server_id;
  int32_t clientID;
  int32_t ChannelID;

  _ClientVoiceToText_onClientJoined_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_clientID(const int32_t val) {
    clientID = val;
  }

  void __set_ChannelID(const int32_t val) {
    ChannelID = val;
  }

  bool operator == (const ClientVoiceToText_onClientJoined_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (!(ChannelID == rhs.ChannelID))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientJoined_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientJoined_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onClientJoined_pargs {
 public:


  virtual ~ClientVoiceToText_onClientJoined_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* clientID;
  const int32_t* ChannelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientJoined_result__isset {
  _ClientVoiceToText_onClientJoined_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientJoined_result__isset;

class ClientVoiceToText_onClientJoined_result {
 public:

  ClientVoiceToText_onClientJoined_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onClientJoined_result() throw() {}

  bool success;

  _ClientVoiceToText_onClientJoined_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onClientJoined_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientJoined_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientJoined_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientJoined_presult__isset {
  _ClientVoiceToText_onClientJoined_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientJoined_presult__isset;

class ClientVoiceToText_onClientJoined_presult {
 public:


  virtual ~ClientVoiceToText_onClientJoined_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onClientJoined_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onClientLeft_args__isset {
  _ClientVoiceToText_onClientLeft_args__isset() : server_id(false), clientID(false), ChannelID(false) {}
  bool server_id;
  bool clientID;
  bool ChannelID;
} _ClientVoiceToText_onClientLeft_args__isset;

class ClientVoiceToText_onClientLeft_args {
 public:

  ClientVoiceToText_onClientLeft_args() : server_id(0), clientID(0), ChannelID(0) {
  }

  virtual ~ClientVoiceToText_onClientLeft_args() throw() {}

  int32_t server_id;
  int32_t clientID;
  int32_t ChannelID;

  _ClientVoiceToText_onClientLeft_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_clientID(const int32_t val) {
    clientID = val;
  }

  void __set_ChannelID(const int32_t val) {
    ChannelID = val;
  }

  bool operator == (const ClientVoiceToText_onClientLeft_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    if (!(ChannelID == rhs.ChannelID))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientLeft_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientLeft_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onClientLeft_pargs {
 public:


  virtual ~ClientVoiceToText_onClientLeft_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* clientID;
  const int32_t* ChannelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientLeft_result__isset {
  _ClientVoiceToText_onClientLeft_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientLeft_result__isset;

class ClientVoiceToText_onClientLeft_result {
 public:

  ClientVoiceToText_onClientLeft_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onClientLeft_result() throw() {}

  bool success;

  _ClientVoiceToText_onClientLeft_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onClientLeft_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onClientLeft_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onClientLeft_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onClientLeft_presult__isset {
  _ClientVoiceToText_onClientLeft_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onClientLeft_presult__isset;

class ClientVoiceToText_onClientLeft_presult {
 public:


  virtual ~ClientVoiceToText_onClientLeft_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onClientLeft_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onChannelCreated_args__isset {
  _ClientVoiceToText_onChannelCreated_args__isset() : server_id(false), channelID(false), channelName(false) {}
  bool server_id;
  bool channelID;
  bool channelName;
} _ClientVoiceToText_onChannelCreated_args__isset;

class ClientVoiceToText_onChannelCreated_args {
 public:

  ClientVoiceToText_onChannelCreated_args() : server_id(0), channelID(0), channelName("") {
  }

  virtual ~ClientVoiceToText_onChannelCreated_args() throw() {}

  int32_t server_id;
  int32_t channelID;
  std::string channelName;

  _ClientVoiceToText_onChannelCreated_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_channelID(const int32_t val) {
    channelID = val;
  }

  void __set_channelName(const std::string& val) {
    channelName = val;
  }

  bool operator == (const ClientVoiceToText_onChannelCreated_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(channelID == rhs.channelID))
      return false;
    if (!(channelName == rhs.channelName))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onChannelCreated_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onChannelCreated_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onChannelCreated_pargs {
 public:


  virtual ~ClientVoiceToText_onChannelCreated_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* channelID;
  const std::string* channelName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onChannelCreated_result__isset {
  _ClientVoiceToText_onChannelCreated_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onChannelCreated_result__isset;

class ClientVoiceToText_onChannelCreated_result {
 public:

  ClientVoiceToText_onChannelCreated_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onChannelCreated_result() throw() {}

  bool success;

  _ClientVoiceToText_onChannelCreated_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onChannelCreated_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onChannelCreated_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onChannelCreated_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onChannelCreated_presult__isset {
  _ClientVoiceToText_onChannelCreated_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onChannelCreated_presult__isset;

class ClientVoiceToText_onChannelCreated_presult {
 public:


  virtual ~ClientVoiceToText_onChannelCreated_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onChannelCreated_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientVoiceToText_onChannelDeleted_args__isset {
  _ClientVoiceToText_onChannelDeleted_args__isset() : server_id(false), channelID(false) {}
  bool server_id;
  bool channelID;
} _ClientVoiceToText_onChannelDeleted_args__isset;

class ClientVoiceToText_onChannelDeleted_args {
 public:

  ClientVoiceToText_onChannelDeleted_args() : server_id(0), channelID(0) {
  }

  virtual ~ClientVoiceToText_onChannelDeleted_args() throw() {}

  int32_t server_id;
  int32_t channelID;

  _ClientVoiceToText_onChannelDeleted_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_channelID(const int32_t val) {
    channelID = val;
  }

  bool operator == (const ClientVoiceToText_onChannelDeleted_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(channelID == rhs.channelID))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onChannelDeleted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onChannelDeleted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientVoiceToText_onChannelDeleted_pargs {
 public:


  virtual ~ClientVoiceToText_onChannelDeleted_pargs() throw() {}

  const int32_t* server_id;
  const int32_t* channelID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onChannelDeleted_result__isset {
  _ClientVoiceToText_onChannelDeleted_result__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onChannelDeleted_result__isset;

class ClientVoiceToText_onChannelDeleted_result {
 public:

  ClientVoiceToText_onChannelDeleted_result() : success(0) {
  }

  virtual ~ClientVoiceToText_onChannelDeleted_result() throw() {}

  bool success;

  _ClientVoiceToText_onChannelDeleted_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientVoiceToText_onChannelDeleted_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientVoiceToText_onChannelDeleted_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientVoiceToText_onChannelDeleted_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientVoiceToText_onChannelDeleted_presult__isset {
  _ClientVoiceToText_onChannelDeleted_presult__isset() : success(false) {}
  bool success;
} _ClientVoiceToText_onChannelDeleted_presult__isset;

class ClientVoiceToText_onChannelDeleted_presult {
 public:


  virtual ~ClientVoiceToText_onChannelDeleted_presult() throw() {}

  bool* success;

  _ClientVoiceToText_onChannelDeleted_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientVoiceToTextClient : virtual public ClientVoiceToTextIf {
 public:
  ClientVoiceToTextClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClientVoiceToTextClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void info(const int32_t server_id, const int32_t max_clients, const std::string& DNS, const int32_t port_TS, const int32_t port_Thrift);
  void send_info(const int32_t server_id, const int32_t max_clients, const std::string& DNS, const int32_t port_TS, const int32_t port_Thrift);
  void recv_info();
  bool onClientConnected(const int32_t server_id, const int32_t clientID, const std::string& clientNick);
  void send_onClientConnected(const int32_t server_id, const int32_t clientID, const std::string& clientNick);
  bool recv_onClientConnected();
  bool onClientDisconnected(const int32_t server_id, const int32_t clientID);
  void send_onClientDisconnected(const int32_t server_id, const int32_t clientID);
  bool recv_onClientDisconnected();
  bool onClientJoined(const int32_t server_id, const int32_t clientID, const int32_t ChannelID);
  void send_onClientJoined(const int32_t server_id, const int32_t clientID, const int32_t ChannelID);
  bool recv_onClientJoined();
  bool onClientLeft(const int32_t server_id, const int32_t clientID, const int32_t ChannelID);
  void send_onClientLeft(const int32_t server_id, const int32_t clientID, const int32_t ChannelID);
  bool recv_onClientLeft();
  bool onChannelCreated(const int32_t server_id, const int32_t channelID, const std::string& channelName);
  void send_onChannelCreated(const int32_t server_id, const int32_t channelID, const std::string& channelName);
  bool recv_onChannelCreated();
  bool onChannelDeleted(const int32_t server_id, const int32_t channelID);
  void send_onChannelDeleted(const int32_t server_id, const int32_t channelID);
  bool recv_onChannelDeleted();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientVoiceToTextProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientVoiceToTextIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientVoiceToTextProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_info(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onClientConnected(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onClientDisconnected(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onClientJoined(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onClientLeft(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onChannelCreated(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_onChannelDeleted(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientVoiceToTextProcessor(boost::shared_ptr<ClientVoiceToTextIf> iface) :
    iface_(iface) {
    processMap_["info"] = &ClientVoiceToTextProcessor::process_info;
    processMap_["onClientConnected"] = &ClientVoiceToTextProcessor::process_onClientConnected;
    processMap_["onClientDisconnected"] = &ClientVoiceToTextProcessor::process_onClientDisconnected;
    processMap_["onClientJoined"] = &ClientVoiceToTextProcessor::process_onClientJoined;
    processMap_["onClientLeft"] = &ClientVoiceToTextProcessor::process_onClientLeft;
    processMap_["onChannelCreated"] = &ClientVoiceToTextProcessor::process_onChannelCreated;
    processMap_["onChannelDeleted"] = &ClientVoiceToTextProcessor::process_onChannelDeleted;
  }

  virtual ~ClientVoiceToTextProcessor() {}
};

class ClientVoiceToTextProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientVoiceToTextProcessorFactory(const ::boost::shared_ptr< ClientVoiceToTextIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientVoiceToTextIfFactory > handlerFactory_;
};

class ClientVoiceToTextMultiface : virtual public ClientVoiceToTextIf {
 public:
  ClientVoiceToTextMultiface(std::vector<boost::shared_ptr<ClientVoiceToTextIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientVoiceToTextMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientVoiceToTextIf> > ifaces_;
  ClientVoiceToTextMultiface() {}
  void add(boost::shared_ptr<ClientVoiceToTextIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void info(const int32_t server_id, const int32_t max_clients, const std::string& DNS, const int32_t port_TS, const int32_t port_Thrift) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      ifaces_[i]->info(server_id, max_clients, DNS, port_TS, port_Thrift);
    }
  }

  bool onClientConnected(const int32_t server_id, const int32_t clientID, const std::string& clientNick) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onClientConnected(server_id, clientID, clientNick);
      } else {
        ifaces_[i]->onClientConnected(server_id, clientID, clientNick);
      }
    }
  }

  bool onClientDisconnected(const int32_t server_id, const int32_t clientID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onClientDisconnected(server_id, clientID);
      } else {
        ifaces_[i]->onClientDisconnected(server_id, clientID);
      }
    }
  }

  bool onClientJoined(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onClientJoined(server_id, clientID, ChannelID);
      } else {
        ifaces_[i]->onClientJoined(server_id, clientID, ChannelID);
      }
    }
  }

  bool onClientLeft(const int32_t server_id, const int32_t clientID, const int32_t ChannelID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onClientLeft(server_id, clientID, ChannelID);
      } else {
        ifaces_[i]->onClientLeft(server_id, clientID, ChannelID);
      }
    }
  }

  bool onChannelCreated(const int32_t server_id, const int32_t channelID, const std::string& channelName) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onChannelCreated(server_id, channelID, channelName);
      } else {
        ifaces_[i]->onChannelCreated(server_id, channelID, channelName);
      }
    }
  }

  bool onChannelDeleted(const int32_t server_id, const int32_t channelID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->onChannelDeleted(server_id, channelID);
      } else {
        ifaces_[i]->onChannelDeleted(server_id, channelID);
      }
    }
  }

};

} // namespace

#endif
