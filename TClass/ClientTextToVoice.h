/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClientTextToVoice_H
#define ClientTextToVoice_H

#include <TDispatchProcessor.h>
#include "TextToVoice_types.h"

namespace ThriftServer {

class ClientTextToVoiceIf {
 public:
  virtual ~ClientTextToVoiceIf() {}
  virtual int32_t channelCreate(const int32_t server_id, const std::string& nome, const std::string& password) = 0;
  virtual bool channelDelete(const int32_t server_id, const std::string& nome) = 0;
  virtual bool disconnectClient(const int32_t server_id, const std::string& clientID) = 0;
};

class ClientTextToVoiceIfFactory {
 public:
  typedef ClientTextToVoiceIf Handler;

  virtual ~ClientTextToVoiceIfFactory() {}

  virtual ClientTextToVoiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ClientTextToVoiceIf* /* handler */) = 0;
};

class ClientTextToVoiceIfSingletonFactory : virtual public ClientTextToVoiceIfFactory {
 public:
  ClientTextToVoiceIfSingletonFactory(const boost::shared_ptr<ClientTextToVoiceIf>& iface) : iface_(iface) {}
  virtual ~ClientTextToVoiceIfSingletonFactory() {}

  virtual ClientTextToVoiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ClientTextToVoiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ClientTextToVoiceIf> iface_;
};

class ClientTextToVoiceNull : virtual public ClientTextToVoiceIf {
 public:
  virtual ~ClientTextToVoiceNull() {}
  int32_t channelCreate(const int32_t /* server_id */, const std::string& /* nome */, const std::string& /* password */) {
    int32_t _return = 0;
    return _return;
  }
  bool channelDelete(const int32_t /* server_id */, const std::string& /* nome */) {
    bool _return = false;
    return _return;
  }
  bool disconnectClient(const int32_t /* server_id */, const std::string& /* clientID */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _ClientTextToVoice_channelCreate_args__isset {
  _ClientTextToVoice_channelCreate_args__isset() : server_id(false), nome(false), password(false) {}
  bool server_id;
  bool nome;
  bool password;
} _ClientTextToVoice_channelCreate_args__isset;

class ClientTextToVoice_channelCreate_args {
 public:

  ClientTextToVoice_channelCreate_args() : server_id(0), nome(""), password("") {
  }

  virtual ~ClientTextToVoice_channelCreate_args() throw() {}

  int32_t server_id;
  std::string nome;
  std::string password;

  _ClientTextToVoice_channelCreate_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_nome(const std::string& val) {
    nome = val;
  }

  void __set_password(const std::string& val) {
    password = val;
  }

  bool operator == (const ClientTextToVoice_channelCreate_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(nome == rhs.nome))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_channelCreate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_channelCreate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientTextToVoice_channelCreate_pargs {
 public:


  virtual ~ClientTextToVoice_channelCreate_pargs() throw() {}

  const int32_t* server_id;
  const std::string* nome;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_channelCreate_result__isset {
  _ClientTextToVoice_channelCreate_result__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_channelCreate_result__isset;

class ClientTextToVoice_channelCreate_result {
 public:

  ClientTextToVoice_channelCreate_result() : success(0) {
  }

  virtual ~ClientTextToVoice_channelCreate_result() throw() {}

  int32_t success;

  _ClientTextToVoice_channelCreate_result__isset __isset;

  void __set_success(const int32_t val) {
    success = val;
  }

  bool operator == (const ClientTextToVoice_channelCreate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_channelCreate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_channelCreate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_channelCreate_presult__isset {
  _ClientTextToVoice_channelCreate_presult__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_channelCreate_presult__isset;

class ClientTextToVoice_channelCreate_presult {
 public:


  virtual ~ClientTextToVoice_channelCreate_presult() throw() {}

  int32_t* success;

  _ClientTextToVoice_channelCreate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientTextToVoice_channelDelete_args__isset {
  _ClientTextToVoice_channelDelete_args__isset() : server_id(false), nome(false) {}
  bool server_id;
  bool nome;
} _ClientTextToVoice_channelDelete_args__isset;

class ClientTextToVoice_channelDelete_args {
 public:

  ClientTextToVoice_channelDelete_args() : server_id(0), nome("") {
  }

  virtual ~ClientTextToVoice_channelDelete_args() throw() {}

  int32_t server_id;
  std::string nome;

  _ClientTextToVoice_channelDelete_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_nome(const std::string& val) {
    nome = val;
  }

  bool operator == (const ClientTextToVoice_channelDelete_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(nome == rhs.nome))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_channelDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_channelDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientTextToVoice_channelDelete_pargs {
 public:


  virtual ~ClientTextToVoice_channelDelete_pargs() throw() {}

  const int32_t* server_id;
  const std::string* nome;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_channelDelete_result__isset {
  _ClientTextToVoice_channelDelete_result__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_channelDelete_result__isset;

class ClientTextToVoice_channelDelete_result {
 public:

  ClientTextToVoice_channelDelete_result() : success(0) {
  }

  virtual ~ClientTextToVoice_channelDelete_result() throw() {}

  bool success;

  _ClientTextToVoice_channelDelete_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientTextToVoice_channelDelete_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_channelDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_channelDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_channelDelete_presult__isset {
  _ClientTextToVoice_channelDelete_presult__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_channelDelete_presult__isset;

class ClientTextToVoice_channelDelete_presult {
 public:


  virtual ~ClientTextToVoice_channelDelete_presult() throw() {}

  bool* success;

  _ClientTextToVoice_channelDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ClientTextToVoice_disconnectClient_args__isset {
  _ClientTextToVoice_disconnectClient_args__isset() : server_id(false), clientID(false) {}
  bool server_id;
  bool clientID;
} _ClientTextToVoice_disconnectClient_args__isset;

class ClientTextToVoice_disconnectClient_args {
 public:

  ClientTextToVoice_disconnectClient_args() : server_id(0), clientID("") {
  }

  virtual ~ClientTextToVoice_disconnectClient_args() throw() {}

  int32_t server_id;
  std::string clientID;

  _ClientTextToVoice_disconnectClient_args__isset __isset;

  void __set_server_id(const int32_t val) {
    server_id = val;
  }

  void __set_clientID(const std::string& val) {
    clientID = val;
  }

  bool operator == (const ClientTextToVoice_disconnectClient_args & rhs) const
  {
    if (!(server_id == rhs.server_id))
      return false;
    if (!(clientID == rhs.clientID))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_disconnectClient_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_disconnectClient_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ClientTextToVoice_disconnectClient_pargs {
 public:


  virtual ~ClientTextToVoice_disconnectClient_pargs() throw() {}

  const int32_t* server_id;
  const std::string* clientID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_disconnectClient_result__isset {
  _ClientTextToVoice_disconnectClient_result__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_disconnectClient_result__isset;

class ClientTextToVoice_disconnectClient_result {
 public:

  ClientTextToVoice_disconnectClient_result() : success(0) {
  }

  virtual ~ClientTextToVoice_disconnectClient_result() throw() {}

  bool success;

  _ClientTextToVoice_disconnectClient_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ClientTextToVoice_disconnectClient_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ClientTextToVoice_disconnectClient_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ClientTextToVoice_disconnectClient_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ClientTextToVoice_disconnectClient_presult__isset {
  _ClientTextToVoice_disconnectClient_presult__isset() : success(false) {}
  bool success;
} _ClientTextToVoice_disconnectClient_presult__isset;

class ClientTextToVoice_disconnectClient_presult {
 public:


  virtual ~ClientTextToVoice_disconnectClient_presult() throw() {}

  bool* success;

  _ClientTextToVoice_disconnectClient_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ClientTextToVoiceClient : virtual public ClientTextToVoiceIf {
 public:
  ClientTextToVoiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ClientTextToVoiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t channelCreate(const int32_t server_id, const std::string& nome, const std::string& password);
  void send_channelCreate(const int32_t server_id, const std::string& nome, const std::string& password);
  int32_t recv_channelCreate();
  bool channelDelete(const int32_t server_id, const std::string& nome);
  void send_channelDelete(const int32_t server_id, const std::string& nome);
  bool recv_channelDelete();
  bool disconnectClient(const int32_t server_id, const std::string& clientID);
  void send_disconnectClient(const int32_t server_id, const std::string& clientID);
  bool recv_disconnectClient();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ClientTextToVoiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ClientTextToVoiceIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ClientTextToVoiceProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_channelCreate(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_channelDelete(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectClient(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ClientTextToVoiceProcessor(boost::shared_ptr<ClientTextToVoiceIf> iface) :
    iface_(iface) {
    processMap_["channelCreate"] = &ClientTextToVoiceProcessor::process_channelCreate;
    processMap_["channelDelete"] = &ClientTextToVoiceProcessor::process_channelDelete;
    processMap_["disconnectClient"] = &ClientTextToVoiceProcessor::process_disconnectClient;
  }

  virtual ~ClientTextToVoiceProcessor() {}
};

class ClientTextToVoiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ClientTextToVoiceProcessorFactory(const ::boost::shared_ptr< ClientTextToVoiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ClientTextToVoiceIfFactory > handlerFactory_;
};

class ClientTextToVoiceMultiface : virtual public ClientTextToVoiceIf {
 public:
  ClientTextToVoiceMultiface(std::vector<boost::shared_ptr<ClientTextToVoiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ClientTextToVoiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ClientTextToVoiceIf> > ifaces_;
  ClientTextToVoiceMultiface() {}
  void add(boost::shared_ptr<ClientTextToVoiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t channelCreate(const int32_t server_id, const std::string& nome, const std::string& password) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->channelCreate(server_id, nome, password);
      } else {
        ifaces_[i]->channelCreate(server_id, nome, password);
      }
    }
  }

  bool channelDelete(const int32_t server_id, const std::string& nome) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->channelDelete(server_id, nome);
      } else {
        ifaces_[i]->channelDelete(server_id, nome);
      }
    }
  }

  bool disconnectClient(const int32_t server_id, const std::string& clientID) {
    size_t sz = ifaces_.size();
    for (size_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->disconnectClient(server_id, clientID);
      } else {
        ifaces_[i]->disconnectClient(server_id, clientID);
      }
    }
  }

};

} // namespace

#endif
