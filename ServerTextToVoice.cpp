// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "TClass/ClientTextToVoice.h"
#include <protocol/TBinaryProtocol.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>
#include <server/TNonblockingServer.h>


using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;
using namespace ::apache::thrift::concurrency;


using boost::shared_ptr;

using namespace  ::ThriftServer;

class ClientTextToVoiceHandler : virtual public ClientTextToVoiceIf {
 public:
  ClientTextToVoiceHandler() {
    // Your initialization goes here
  }

  bool new_channel(const std::string& nome, const std::string& password) {
    // Your implementation goes here
    printf("new_channel\n");
  }

  void add_client(const std::string& channel_name, const std::string& client_name) {
    // Your implementation goes here
    printf("add_client\n");
  }

};

int asd() {
  int port = 9090;

  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
shared_ptr<ClientTextToVoiceHandler> handler(new ClientTextToVoiceHandler());
shared_ptr<TProcessor> processor(new ClientTextToVoiceProcessor(handler));
TNonblockingServer server(processor, protocolFactory, port);
   server.serve();
   
  
  
  return 0;
}